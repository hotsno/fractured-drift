[gd_scene load_steps=8 format=3 uid="uid://d26kr6ljdc6tv"]

[ext_resource type="PackedScene" uid="uid://bqpljm7vvrkmg" path="res://Assets/Model Exports/SquareTerrainFloor1.glb" id="1_i220n"]

[sub_resource type="Shader" id="Shader_jtlqn"]
code = "// BoTW Toon Shader by NekotoArts
// wrote this at 2AM
//
//
//
// England is my city
// Smoke trees
// Two to the One from the One to the Three
shader_type spatial;
render_mode diffuse_toon, specular_toon;

uniform vec4 tint : source_color;
uniform sampler2D albedo_texture : source_color;
uniform float metallic : hint_range(0.0, 1.0) = 0.0;
uniform sampler2D normal_map : source_color;
uniform float shadow_size = 0.045;
uniform float shadow_blend = 0.001;
uniform float shadow_extra_intensity = 0.0;
uniform vec4 shadow_color : source_color;
uniform vec4 light_tint : source_color;
uniform float rimlight_size = 0.921;
uniform float rimlight_blend = 0.01;
uniform vec4 rimlight_color : source_color;
uniform bool use_normalmap = true;
uniform bool animated = true;
uniform float time_scale = 0.02;
uniform vec3 normal_bias = vec3(0.0);
uniform vec3 light_bias = vec3(0.0);
uniform bool use_view = true;
uniform vec4 view_bias : source_color = vec4(1.0, 0.0, 1.0, 1.0);
uniform float view_multiplier : hint_range(-1.0, 1.0) = -1.0;

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}

varying vec3 vertex_normal;
varying vec3 vertex_tangent;


void fragment(){
	ALBEDO = texture(albedo_texture, UV).rgb * tint.rgb;
	METALLIC = metallic;
}

void light(){
	vec3 normal = NORMAL;
	//if (use_normalmap){
		//vec3 normal_from_texture;
		//if (animated){
			////normal_from_texture = texture(normal_map, UV + TIME * time_scale).rgb;
		//}else{
			//normal_from_texture = texture(normal_map, UV).rgb;
		//}
		//normal = vec3(normal_from_texture.x * NORMAL.x,
		//normal_from_texture.y * NORMAL.y, normal_from_texture.z);
//
		//normal = NORMAL - normal_from_texture;
	//}else{
		//normal = NORMAL;
	//}

	if (use_view){
		//normal -= VIEW * view_bias.rgb * view_multiplier;
	}

	float NdotL = dot(normal + normal_bias, LIGHT + light_bias);

	float rounded = smoothstep(shadow_size, shadow_blend + shadow_size, NdotL);
	float one_minus = 1.0 - rounded;
	vec3 mult1 = LIGHT_COLOR * rounded * light_tint.rgb * ATTENUATION;
	vec3 mult2 = (one_minus * 1.4 * shadow_color.rgb) - shadow_extra_intensity;
	vec3 add1 = mult1 + mult2;

	float add3  = rimlight_blend + rimlight_size;
	float basic_fresnel = fresnel(1.0, NORMAL, VIEW);
	float smoothed = smoothstep(rimlight_size, add3, basic_fresnel);

	vec3 add2 = add1 + smoothed * rimlight_color.rgb;
	DIFFUSE_LIGHT += ALBEDO * add2;
}
"

[sub_resource type="Gradient" id="Gradient_sx0jx"]
offsets = PackedFloat32Array(0.00819672, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_fr7qm"]
gradient = SubResource("Gradient_sx0jx")
fill_from = Vector2(0, 1)
fill_to = Vector2(0.811828, 0.198925)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_7lqdt"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_s2fa2"]
noise = SubResource("FastNoiseLite_7lqdt")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_owndv"]
render_priority = 0
shader = SubResource("Shader_jtlqn")
shader_parameter/tint = Color(0.856235, 0.789123, 0.659533, 1)
shader_parameter/metallic = 0.0
shader_parameter/shadow_size = 0.045
shader_parameter/shadow_blend = 0.001
shader_parameter/shadow_extra_intensity = 0.0
shader_parameter/shadow_color = null
shader_parameter/light_tint = Color(0.786571, 0.749291, 0.692208, 1)
shader_parameter/rimlight_size = 0.921
shader_parameter/rimlight_blend = 0.01
shader_parameter/rimlight_color = Color(0, 0, 0, 1)
shader_parameter/use_normalmap = true
shader_parameter/animated = false
shader_parameter/time_scale = 0.02
shader_parameter/normal_bias = Vector3(0, 0, 0)
shader_parameter/light_bias = Vector3(0, 0, 0)
shader_parameter/use_view = true
shader_parameter/view_bias = Color(1, 0, 1, 1)
shader_parameter/view_multiplier = -1.0
shader_parameter/albedo_texture = SubResource("GradientTexture2D_fr7qm")
shader_parameter/normal_map = SubResource("NoiseTexture2D_s2fa2")

[node name="SquareTerrainFloor1" instance=ExtResource("1_i220n")]

[node name="Terrain" parent="." index="0"]
material_override = SubResource("ShaderMaterial_owndv")
